new entry "CL_Passive_OneDnD_RelentlessRage"
type "PassiveData"
// Relentless Rage
data "DisplayName" "h296bdd8cge203g4ca1gad51g284f77702134;1"
data "Description" "h6ec6ad728cc048229321e61871e031058b53;1"
data "DescriptionParams" "0;10;5"
data "Icon" "PassiveFeature_RelentlessRage"
data "Properties" "Highlighted"
data "BoostConditions" "HasStatus('SG_Rage')"
data "Boosts" "DownedStatus(CL_STATUS_ONEDND_RELENTLESS_RAGE, 5)"
data "StatsFunctorContext" "OnShortRest;OnLongRest"
data "StatsFunctors" "RemoveStatus(CL_STATUS_ONEDND_RELENTLESS_RAGE_SUCCESS)"

new entry "CL_STATUS_ONEDND_RELENTLESS_RAGE"
type "StatusData"
data "StatusType" "DOWNED"
// Downed
data "DisplayName" "h371b7c23g65beg45f4g8680gbcd03907e57f;1"
data "Description" "h6ec6ad728cc048229321e61871e031058b53;1"
data "DescriptionParams" "0;10;5"
data "Icon" "Status_Downed"
data "TooltipSave" "Constitution"
// The DOWNED StackId allows this to be overwritten by the regular downed status if the roll fails:
data "StackId" "DOWNED"
data "OnApplyRoll" "SavingThrow(Ability.Constitution, CL_CalculateRelentlessRageDC())"
data "OnApplySuccess" "RegainHitPoints(ClassLevel(Barbarian) * 2, Guaranteed); ApplyStatus(CL_STATUS_ONEDND_RELENTLESS_RAGE_SUCCESS, 100, 1); ResetCombatTurn(); RestoreResource(Movement, 100%, 0); RestoreResource(ActionPoint, 100%, 0); RestoreResource(BonusActionPoint, 100%, 0); RestoreResource(ReactionActionPoint, 100%, 0)"
data "OnApplyFail" "ApplyStatus(DOWNED, 100, 5)"
data "HideOverheadUI" "1"
data "StatusPropertyFlags" "DisableCombatlog"

new entry "CL_STATUS_ONEDND_RELENTLESS_RAGE_SUCCESS"
type "StatusData"
data "StatusType" "BOOST"
// Relentless Rage
data "DisplayName" "h296bdd8cge203g4ca1gad51g284f77702134;1"
data "Description" "h5715261be9cc418086f958398714303235fc;1"
data "Icon" "PassiveFeature_RelentlessRage"
data "StackId" "CL_STATUS_ONEDND_RELENTLESS_RAGE_SUCCESS"
data "StackType" "Additive"
data "StatusPropertyFlags" "DisableCombatlog;DisableOverhead;FreezeDuration"
